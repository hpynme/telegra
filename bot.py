import telebot
import os
from datetime import datetime

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN, parse_mode="MarkdownV2")

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ì ‡¶®‡ßã‡¶ü ‡¶°‡¶æ‡¶ü‡¶æ
user_tasks = {}
user_done = {}
user_pinned = {}
user_notes = {}

def escape_markdown(text):
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message,
                 "üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶Ü‡¶π‡¶æ‡¶¶ ‡¶≠‡¶æ‡¶á!\n\n"
                 "‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:\n"
                 "`/add ‡¶ï‡¶æ‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®` - ‡¶ï‡¶æ‡¶ú ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/list` - ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
                 "`/done ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞` - ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/remove ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞` - ‡¶ï‡¶æ‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/edit ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡¶§‡ßÅ‡¶®_‡¶ï‡¶æ‡¶ú` - ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/clear` - ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®\n"
                 "`/pin ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞` - ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶™‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/unpin` - ‡¶™‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/note ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®` - ‡¶®‡ßã‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®\n"
                 "`/notes` - ‡¶®‡ßã‡¶ü ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
                 "`/help` - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø\n"
                 "`/about` - ‡¶¨‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá\n"
                 "`/total` - ‡¶Æ‡ßã‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ\n"
                 "`/date` - ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ\n"
                 "`/time` - ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü\n"
                 "`/save` - ‡¶ï‡¶æ‡¶ú ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶®\n"
                 "`/copyall` - ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú copyable ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
                 "`/find ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®` - ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö\n"
                 "`/reset` - ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü\n"
                 , parse_mode="MarkdownV2")

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message,
                 "‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã:\n"
                 "`/add ‡¶ï‡¶æ‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®`\n"
                 "`/list`\n"
                 "`/done ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞`\n"
                 "`/remove ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞`\n"
                 "`/edit ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡¶§‡ßÅ‡¶®_‡¶ï‡¶æ‡¶ú`\n"
                 "`/clear`\n"
                 "`/pin ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞`\n"
                 "`/unpin`\n"
                 "`/note ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®`\n"
                 "`/notes`\n"
                 "`/total`\n"
                 "`/date`\n"
                 "`/time`\n"
                 "`/save`\n"
                 "`/copyall`\n"
                 "`/find ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®`\n"
                 "`/reset`\n"
                 , parse_mode="MarkdownV2")

@bot.message_handler(commands=['about'])
def about(message):
    bot.reply_to(message,
                 "Ahad Pro To-Do Bot v2\n"
                 "Author: Ahad\n"
                 "Features: Advanced To-Do, Notes, Reminder demo\n"
                 "Built with ‚ù§Ô∏è using Python & telebot\n"
                 "GitHub ready & Render deployable\n"
                 , parse_mode="MarkdownV2")

@bot.message_handler(commands=['add'])
def add_task(message):
    uid = message.from_user.id
    task = message.text.replace('/add', '').strip()
    if not task:
        bot.reply_to(message, "‚ùó ‡¶ï‡¶æ‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡¶ø‡¶®: `/add ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú`", parse_mode="MarkdownV2")
        return
    user_tasks.setdefault(uid, []).append(task)
    bot.reply_to(message, f"‚úÖ ‡¶ï‡¶æ‡¶ú ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá: `{escape_markdown(task)}`", parse_mode="MarkdownV2")

@bot.message_handler(commands=['list'])
def list_tasks(message):
    uid = message.from_user.id
    tasks = user_tasks.get(uid, [])
    pinned = user_pinned.get(uid, None)
    done = user_done.get(uid, [])
    if not tasks:
        bot.reply_to(message, "üì≠ ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶ú ‡¶®‡ßá‡¶á‡•§ `/add` ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", parse_mode="MarkdownV2")
        return
    lines = []
    if pinned:
        lines.append(f"üìå *‡¶™‡¶ø‡¶® ‡¶ï‡¶∞‡¶æ ‡¶ï‡¶æ‡¶ú:* `{escape_markdown(pinned)}`\n")
    for i, t in enumerate(tasks):
        mark = "‚úîÔ∏è" if i in done else "‚ùå"
        lines.append(f"{i+1}\\.\ {mark} `{escape_markdown(t)}`")
    text = "\n".join(lines)
    bot.reply_to(message, f"üìù *‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:*\n\n{text}", parse_mode="MarkdownV2")

@bot.message_handler(commands=['done'])
def done_task(message):
    uid = message.from_user.id
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/done ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞_‡¶®‡¶Æ‡ßç‡¶¨‡¶∞`", parse_mode="MarkdownV2")
        return
    idx = int(args[1]) - 1
    tasks = user_tasks.get(uid, [])
    if idx < 0 or idx >= len(tasks):
        bot.reply_to(message, "‚ùó ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞", parse_mode="MarkdownV2")
        return
    user_done.setdefault(uid, [])
    if idx in user_done[uid]:
        bot.reply_to(message, "‚ö†Ô∏è ‡¶ï‡¶æ‡¶ú ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", parse_mode="MarkdownV2")
        return
    user_done[uid].append(idx)
    bot.reply_to(message, f"‚úÖ ‡¶ï‡¶æ‡¶ú {idx+1} ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", parse_mode="MarkdownV2")

@bot.message_handler(commands=['remove'])
def remove_task(message):
    uid = message.from_user.id
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/remove ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞_‡¶®‡¶Æ‡ßç‡¶¨‡¶∞`", parse_mode="MarkdownV2")
        return
    idx = int(args[1]) - 1
    tasks = user_tasks.get(uid, [])
    if idx < 0 or idx >= len(tasks):
        bot.reply_to(message, "‚ùó ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞", parse_mode="MarkdownV2")
        return
    removed_task = tasks.pop(idx)
    # Remove from done list if present
    if uid in user_done and idx in user_done[uid]:
        user_done[uid].remove(idx)
    # Adjust done indices > idx
    if uid in user_done:
        user_done[uid] = [i-1 if i > idx else i for i in user_done[uid]]
    bot.reply_to(message, f"üóëÔ∏è ‡¶ï‡¶æ‡¶ú '{escape_markdown(removed_task)}' ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", parse_mode="MarkdownV2")

@bot.message_handler(commands=['edit'])
def edit_task(message):
    uid = message.from_user.id
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3 or not parts[1].isdigit():
        bot.reply_to(message, "‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/edit ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞_‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡¶§‡ßÅ‡¶®_‡¶ï‡¶æ‡¶ú`", parse_mode="MarkdownV2")
        return
    idx = int(parts[1]) - 1
    new_task = parts[2].strip()
    tasks = user_tasks.get(uid, [])
    if idx < 0 or idx >= len(tasks):
        bot.reply_to(message, "‚ùó ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞", parse_mode="MarkdownV2")
        return
    old_task = tasks[idx]
    tasks[idx] = new_task
    bot.reply_to(message, f"‚úèÔ∏è ‡¶ï‡¶æ‡¶ú ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá:\n‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã: `{escape_markdown(old_task)}`\n‡¶®‡¶§‡ßÅ‡¶®: `{escape_markdown(new_task)}`", parse_mode="MarkdownV2")

@bot.message_handler(commands=['clear'])
def clear_tasks(message):
    uid = message.from_user.id
    user_tasks[uid] = []
    user_done[uid] = []
    user_pinned[uid] = None
    bot.reply_to(message, "üóëÔ∏è ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", parse_mode="MarkdownV2")

@bot.message_handler(commands=['pin'])
def pin_task(message):
    uid = message.from_user.id
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/pin ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞_‡¶®‡¶Æ‡ßç‡¶¨‡¶∞`", parse_mode="MarkdownV2")
        return
    idx = int(args[1]) - 1
    tasks = user_tasks.get(uid, [])
    if idx < 0 or idx >= len(tasks):
        bot.reply_to(message, "‚ùó ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞", parse_mode="MarkdownV2")
        return
    user_pinned[uid] = tasks[idx]
    bot.reply_to(message, f"üìå ‡¶ï‡¶æ‡¶ú ‡¶™‡¶ø‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: `{escape_markdown(tasks[idx])}`", parse_mode="MarkdownV2")

@bot.message_handler(commands=['unpin'])
def unpin_task(message):
    uid = message.from_user.id
    if user_pinned.get(uid):
        user_pinned[uid] = None
        bot.reply_to(message, "üìå ‡¶™‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", parse_mode="MarkdownV2")
    else:
        bot.reply_to(message, "‚ö†Ô∏è ‡¶ï‡ßã‡¶® ‡¶ï‡¶æ‡¶ú ‡¶™‡¶ø‡¶® ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§", parse_mode="MarkdownV2")

@bot.message_handler(commands=['note'])
def add_note(message):
    uid = message.from_user.id
    note = message.text.replace('/note', '').strip()
    if not note:
        bot.reply_to(message, "‚ùó `/note` ‡¶è‡¶∞ ‡¶™‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", parse_mode="MarkdownV2")
        return
    user_notes.setdefault(uid, []).append(note)
    bot.reply_to(message, f"üóíÔ∏è ‡¶®‡ßã‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá: `{escape_markdown(note)}`", parse_mode="MarkdownV2")

@bot.message_handler(commands=['notes'])
def list_notes(message):
    uid = message.from_user.id
    notes = user_notes.get(uid, [])
    if not notes:
        bot.reply_to(message, "üì≠ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡ßã‡¶ü ‡¶®‡ßá‡¶á‡•§ `/note` ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", parse_mode="MarkdownV2")
        return
    notes_text = "\n".join([f"{i+1}\\.\ `{escape_markdown(n)}`" for i, n in enumerate(notes)])
    bot.reply_to(message, f"üóíÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡ßã‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã:\n\n{notes_text}", parse_mode="MarkdownV2")

@bot.message_handler(commands=['total'])
def total_tasks(message):
    uid = message.from_user.id
    count = len(user_tasks.get(uid, []))
    bot.reply_to(message, f"üìä ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {count}", parse_mode="MarkdownV2")

@bot.message_handler(commands=['date'])
def date_cmd(message):
    now = datetime.now()
    date_str = now.strftime("%d-%m-%Y")
    bot.reply_to(message, f"üìÖ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {date_str}", parse_mode="MarkdownV2")

@bot.message_handler(commands=['time'])
def time_cmd(message):
    now = datetime.now()
    time_str = now.strftime("%I:%M %p")
    bot.reply_to(message, f"‚è∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶Æ‡ßü: {time_str}", parse_mode="MarkdownV2")

@bot.message_handler(commands=['save'])
def save_tasks(message):
    uid = message.from_user.id
    tasks = user_tasks.get(uid, [])
    if not tasks:
        bot.reply_to(message, "üì≠ ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶ú ‡¶®‡ßá‡¶á ‡¶Ø‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§", parse_mode="MarkdownV2")
        return
    text = "\n".join([f"{i+1}. {t}" for i, t in enumerate(tasks)])
    bot.reply_to(message, f"üíæ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã:\n```\n{text}\n```", parse_mode="MarkdownV2")

@bot.message_handler(commands=['copyall'])
def copy_all(message):
    uid = message.from_user.id
    tasks = user_tasks.get(uid, [])
    if not tasks:
        bot.reply_to(message, "üì≠ ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶ú ‡¶®‡ßá‡¶á‡•§", parse_mode="MarkdownV2")
        return
    text = "\n".join([f"{i+1}\\.\ `{escape_markdown(t)}`" for i, t in enumerate(tasks)])
    bot.reply_to(message, f"üìã ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú (copyable):\n\n{text}", parse_mode="MarkdownV2")

@bot.message_handler(commands=['find'])
def find_task(message):
    uid = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: `/find ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®`", parse_mode="MarkdownV2")
        return
    keyword = args[1].lower()
    tasks = user_tasks.get(uid, [])
    results = [f"{i+1}\\.\ `{escape_markdown(t)}`" for i, t in enumerate(tasks) if keyword in t.lower()]
    if not results:
        bot.reply_to(message, "üîç ‡¶ï‡ßã‡¶® ‡¶ï‡¶æ‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§", parse_mode="MarkdownV2")
        return
    bot.reply_to(message, "üîç ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:\n\n" + "\n".join(results), parse_mode="MarkdownV2")

@bot.message_handler(commands=['reset'])
def reset_bot(message):
    uid = message.from_user.id
    user_tasks[uid] = []
    user_done[uid] = []
    user_pinned[uid] = None
    user_notes[uid] = []
    bot.reply_to(message, "‚ôªÔ∏è ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", parse_mode="MarkdownV2")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
bot.infinity_polling()
